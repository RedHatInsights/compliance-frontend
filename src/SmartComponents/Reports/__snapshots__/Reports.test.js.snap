// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Reports expect to render emptystate 1`] = `
<Fragment>
  <PageHeader
    style={
      Object {
        "paddingBottom": 22,
      }
    }
  >
    <PageHeaderTitle
      title="Compliance reports"
    />
  </PageHeader>
  <Connect(Main)>
    <StateViewWithError
      stateValues={
        Object {
          "data": Object {
            "profiles": Object {
              "edges": Array [],
            },
          },
          "error": false,
          "loading": false,
        }
      }
    >
      <StateViewPart
        stateKey="loading"
      >
        <div
          className="policies-donuts"
        >
          <Grid
            hasGutter={true}
          >
            <LoadingComplianceCards />
          </Grid>
        </div>
      </StateViewPart>
      <StateViewPart
        stateKey="data"
      >
        <div
          className="policies-donuts"
        >
          <Grid
            hasGutter={true}
          >
            <ComplianceEmptyState
              client={
                ApolloClient {
                  "cache": InMemoryCache {
                    "addTypename": true,
                    "cacheKeyRoot": KeyTrie {
                      "weakness": true,
                    },
                    "config": Object {
                      "addTypename": true,
                      "dataIdFromObject": [Function],
                      "fragmentMatcher": HeuristicFragmentMatcher {},
                      "freezeResults": false,
                      "resultCaching": true,
                    },
                    "data": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "maybeBroadcastWatch": [Function],
                    "optimisticData": DepTrackingCache {
                      "data": Object {},
                      "depend": [Function],
                    },
                    "silenceBroadcast": false,
                    "storeReader": StoreReader {
                      "executeSelectionSet": [Function],
                      "executeStoreQuery": [Function],
                      "executeSubSelectedArray": [Function],
                      "freezeResults": false,
                    },
                    "storeWriter": StoreWriter {},
                    "typenameDocumentCache": Array [],
                    "watches": Array [],
                  },
                  "clearStoreCallbacks": Array [],
                  "defaultOptions": Object {},
                  "disableNetworkFetches": false,
                  "link": HttpLink {
                    "request": [Function],
                  },
                  "localState": LocalState {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "cacheKeyRoot": KeyTrie {
                        "weakness": true,
                      },
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "fragmentMatcher": HeuristicFragmentMatcher {},
                        "freezeResults": false,
                        "resultCaching": true,
                      },
                      "data": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "silenceBroadcast": false,
                      "storeReader": StoreReader {
                        "executeSelectionSet": [Function],
                        "executeStoreQuery": [Function],
                        "executeSubSelectedArray": [Function],
                        "freezeResults": false,
                      },
                      "storeWriter": StoreWriter {},
                      "typenameDocumentCache": Array [],
                      "watches": Array [],
                    },
                    "client": [Circular],
                  },
                  "mutate": [Function],
                  "query": [Function],
                  "queryDeduplication": true,
                  "queryManager": QueryManager {
                    "assumeImmutableResults": false,
                    "clientAwareness": Object {
                      "name": undefined,
                      "version": undefined,
                    },
                    "dataStore": DataStore {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": KeyTrie {
                          "weakness": true,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "freezeResults": false,
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                          "executeSubSelectedArray": [Function],
                          "freezeResults": false,
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Array [],
                        "watches": Array [],
                      },
                    },
                    "fetchQueryRejectFns": Array [],
                    "idCounter": 1,
                    "inFlightLinkObservables": Array [],
                    "link": HttpLink {
                      "request": [Function],
                    },
                    "localState": LocalState {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "cacheKeyRoot": KeyTrie {
                          "weakness": true,
                        },
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "fragmentMatcher": HeuristicFragmentMatcher {},
                          "freezeResults": false,
                          "resultCaching": true,
                        },
                        "data": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": DepTrackingCache {
                          "data": Object {},
                          "depend": [Function],
                        },
                        "silenceBroadcast": false,
                        "storeReader": StoreReader {
                          "executeSelectionSet": [Function],
                          "executeStoreQuery": [Function],
                          "executeSubSelectedArray": [Function],
                          "freezeResults": false,
                        },
                        "storeWriter": StoreWriter {},
                        "typenameDocumentCache": Array [],
                        "watches": Array [],
                      },
                      "client": [Circular],
                    },
                    "mutationStore": MutationStore {
                      "store": Object {},
                    },
                    "onBroadcast": [Function],
                    "pollingInfoByQueryId": Array [],
                    "queries": Array [],
                    "queryDeduplication": true,
                    "queryStore": QueryStore {
                      "store": Object {},
                    },
                    "ssrMode": false,
                    "transformCache": WeakMap {},
                  },
                  "reFetchObservableQueries": [Function],
                  "resetStore": [Function],
                  "resetStoreCallbacks": Array [],
                  "store": DataStore {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "cacheKeyRoot": KeyTrie {
                        "weakness": true,
                      },
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "fragmentMatcher": HeuristicFragmentMatcher {},
                        "freezeResults": false,
                        "resultCaching": true,
                      },
                      "data": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": DepTrackingCache {
                        "data": Object {},
                        "depend": [Function],
                      },
                      "silenceBroadcast": false,
                      "storeReader": StoreReader {
                        "executeSelectionSet": [Function],
                        "executeStoreQuery": [Function],
                        "executeSubSelectedArray": [Function],
                        "freezeResults": false,
                      },
                      "storeWriter": StoreWriter {},
                      "typenameDocumentCache": Array [],
                      "watches": Array [],
                    },
                  },
                  "typeDefs": undefined,
                  "version": "2.6.10",
                  "watchQuery": [Function],
                }
              }
              mainButton={
                <BackgroundLink
                  to="/scappolicies/new"
                >
                  <Button
                    variant="primary"
                  >
                    Create new policy
                  </Button>
                </BackgroundLink>
              }
              title="No policies are reporting"
            />
          </Grid>
        </div>
      </StateViewPart>
    </StateViewWithError>
  </Connect(Main)>
</Fragment>
`;

exports[`Reports expect to render loading 1`] = `
<Fragment>
  <PageHeader
    style={
      Object {
        "paddingBottom": 22,
      }
    }
  >
    <PageHeaderTitle
      title="Compliance reports"
    />
  </PageHeader>
  <Connect(Main)>
    <StateViewWithError
      stateValues={
        Object {
          "data": undefined,
          "error": false,
          "loading": true,
        }
      }
    >
      <StateViewPart
        stateKey="loading"
      >
        <div
          className="policies-donuts"
        >
          <Grid
            hasGutter={true}
          >
            <LoadingComplianceCards />
          </Grid>
        </div>
      </StateViewPart>
      <StateViewPart
        stateKey="data"
      >
        <div
          className="policies-donuts"
        >
          <Grid
            hasGutter={true}
          />
        </div>
      </StateViewPart>
    </StateViewWithError>
  </Connect(Main)>
</Fragment>
`;

exports[`Reports expect to render without error 1`] = `
<Fragment>
  <PageHeader
    className="page-header-tabs"
  >
    <PageHeaderTitle
      title="Compliance reports"
    />
    <withRouter(Connect(RouterParams)) />
  </PageHeader>
  <Connect(Main)>
    <StateViewWithError
      stateValues={
        Object {
          "data": Object {
            "profiles": Object {
              "edges": Array [
                Object {
                  "node": Object {
                    "businessObjective": Object {
                      "id": "1",
                      "title": "BO 1",
                    },
                    "complianceThreshold": 1,
                    "compliantHostCount": 1,
                    "description": "profile description",
                    "id": "1",
                    "name": "profile1",
                    "refId": "121212",
                    "totalHostCount": 1,
                  },
                },
              ],
            },
          },
          "error": false,
          "loading": false,
        }
      }
    >
      <StateViewPart
        stateKey="loading"
      >
        <div
          className="policies-donuts"
        >
          <Grid
            hasGutter={true}
          >
            <LoadingComplianceCards />
          </Grid>
        </div>
      </StateViewPart>
      <StateViewPart
        stateKey="data"
      >
        <div
          className="policies-donuts"
        >
          <Grid
            hasGutter={true}
          >
            <GridItem
              key="0"
              lg={6}
              md={12}
              sm={12}
              xl={4}
            >
              <ReportCard
                key="0"
                profile={
                  Object {
                    "businessObjective": Object {
                      "id": "1",
                      "title": "BO 1",
                    },
                    "complianceThreshold": 1,
                    "compliantHostCount": 1,
                    "description": "profile description",
                    "id": "1",
                    "name": "profile1",
                    "refId": "121212",
                    "totalHostCount": 1,
                  }
                }
              />
            </GridItem>
          </Grid>
        </div>
      </StateViewPart>
    </StateViewWithError>
  </Connect(Main)>
</Fragment>
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InventoryTable returns 1`] = `
<StateView
  stateValues={
    Object {
      "empty": false,
      "error": undefined,
      "noError": true,
    }
  }
>
  <StateViewPart
    stateKey="error"
  >
    <ErrorPage />
  </StateViewPart>
  <StateViewPart
    stateKey="empty"
  />
  <StateViewPart
    stateKey="noError"
  >
    <ForwardRef
      actions={
        Array [
          Object {
            "onClick": [Function],
            "title": "View in inventory",
          },
        ]
      }
      activeFilters={
        Object {
          "name": "",
        }
      }
      activeFiltersConfig={
        Object {
          "filters": Array [],
          "onDelete": [Function],
        }
      }
      bulkSelect={
        Object {
          "checked": false,
          "count": 0,
          "label": undefined,
          "onSelect": false,
        }
      }
      dedicatedAction={
        <Memo(Connect(ComplianceRemediationButton))
          allSystems={Array []}
          selectedRules={Array []}
        />
      }
      exportConfig={
        Object {
          "isDisabled": true,
          "onSelect": [Function],
        }
      }
      fallback={<Spinner />}
      filterConfig={
        Object {
          "items": Array [
            Object {
              "filterValues": Object {
                "onChange": [Function],
                "value": "",
              },
              "id": "name",
              "label": "Name",
              "placeholder": "Filter by name",
              "type": "text",
            },
          ],
        }
      }
      getEntities={[Function]}
      hideFilters={
        Object {
          "name": true,
          "registeredWith": true,
          "stale": true,
          "tags": true,
        }
      }
      onLoad={[Function]}
      tableProps={
        Object {
          "canSelectAll": false,
        }
      }
      variant=""
    />
  </StateViewPart>
</StateView>
`;

exports[`InventoryTable returns compact 1`] = `
<StateView
  stateValues={
    Object {
      "empty": false,
      "error": undefined,
      "noError": true,
    }
  }
>
  <StateViewPart
    stateKey="error"
  >
    <ErrorPage />
  </StateViewPart>
  <StateViewPart
    stateKey="empty"
  />
  <StateViewPart
    stateKey="noError"
  >
    <ForwardRef
      actions={
        Array [
          Object {
            "onClick": [Function],
            "title": "View in inventory",
          },
        ]
      }
      activeFilters={
        Object {
          "name": "",
        }
      }
      activeFiltersConfig={
        Object {
          "filters": Array [],
          "onDelete": [Function],
        }
      }
      bulkSelect={
        Object {
          "checked": false,
          "count": 0,
          "label": undefined,
          "onSelect": false,
        }
      }
      dedicatedAction={
        <Memo(Connect(ComplianceRemediationButton))
          allSystems={Array []}
          selectedRules={Array []}
        />
      }
      exportConfig={
        Object {
          "isDisabled": true,
          "onSelect": [Function],
        }
      }
      fallback={<Spinner />}
      filterConfig={
        Object {
          "items": Array [
            Object {
              "filterValues": Object {
                "onChange": [Function],
                "value": "",
              },
              "id": "name",
              "label": "Name",
              "placeholder": "Filter by name",
              "type": "text",
            },
          ],
        }
      }
      getEntities={[Function]}
      hideFilters={
        Object {
          "name": true,
          "registeredWith": true,
          "stale": true,
          "tags": true,
        }
      }
      onLoad={[Function]}
      tableProps={
        Object {
          "canSelectAll": false,
        }
      }
      variant="compact"
    />
  </StateViewPart>
</StateView>
`;

exports[`InventoryTable returns showAllSystems 1`] = `
<StateView
  stateValues={
    Object {
      "empty": false,
      "error": undefined,
      "noError": true,
    }
  }
>
  <StateViewPart
    stateKey="error"
  >
    <ErrorPage />
  </StateViewPart>
  <StateViewPart
    stateKey="empty"
  />
  <StateViewPart
    stateKey="noError"
  >
    <ForwardRef
      actions={
        Array [
          Object {
            "onClick": [Function],
            "title": "View in inventory",
          },
        ]
      }
      activeFilters={
        Object {
          "name": "",
        }
      }
      bulkSelect={
        Object {
          "checked": false,
          "count": 0,
          "label": undefined,
          "onSelect": false,
        }
      }
      exportConfig={
        Object {
          "isDisabled": true,
          "onSelect": [Function],
        }
      }
      fallback={<Spinner />}
      getEntities={[Function]}
      hideFilters={
        Object {
          "name": true,
          "registeredWith": true,
          "stale": true,
          "tags": true,
        }
      }
      onLoad={[Function]}
      tableProps={
        Object {
          "canSelectAll": false,
        }
      }
      variant=""
    />
  </StateViewPart>
</StateView>
`;

exports[`InventoryTable returns with a showComplianceSystemsInfo 1`] = `
<StateView
  stateValues={
    Object {
      "empty": false,
      "error": undefined,
      "noError": true,
    }
  }
>
  <StateViewPart
    stateKey="error"
  >
    <ErrorPage />
  </StateViewPart>
  <StateViewPart
    stateKey="empty"
  />
  <StateViewPart
    stateKey="noError"
  >
    <Alert
      isInline={true}
      ouiaId="SystemsListIsDifferentAlert"
      title="The list of systems in this view is different than those that appear in the Inventory. Only systems currently associated with or reporting against compliance policies are displayed."
      variant="info"
    />
    <ForwardRef
      actions={
        Array [
          Object {
            "onClick": [Function],
            "title": "View in inventory",
          },
        ]
      }
      activeFilters={
        Object {
          "name": "",
        }
      }
      activeFiltersConfig={
        Object {
          "filters": Array [],
          "onDelete": [Function],
        }
      }
      bulkSelect={
        Object {
          "checked": false,
          "count": 0,
          "label": undefined,
          "onSelect": false,
        }
      }
      dedicatedAction={
        <Memo(Connect(ComplianceRemediationButton))
          allSystems={Array []}
          selectedRules={Array []}
        />
      }
      exportConfig={
        Object {
          "isDisabled": true,
          "onSelect": [Function],
        }
      }
      fallback={<Spinner />}
      filterConfig={
        Object {
          "items": Array [
            Object {
              "filterValues": Object {
                "onChange": [Function],
                "value": "",
              },
              "id": "name",
              "label": "Name",
              "placeholder": "Filter by name",
              "type": "text",
            },
          ],
        }
      }
      getEntities={[Function]}
      hideFilters={
        Object {
          "name": true,
          "registeredWith": true,
          "stale": true,
          "tags": true,
        }
      }
      onLoad={[Function]}
      tableProps={
        Object {
          "canSelectAll": false,
        }
      }
      variant=""
    />
  </StateViewPart>
</StateView>
`;

exports[`InventoryTable returns with compliantFilter 1`] = `
<StateView
  stateValues={
    Object {
      "empty": false,
      "error": undefined,
      "noError": true,
    }
  }
>
  <StateViewPart
    stateKey="error"
  >
    <ErrorPage />
  </StateViewPart>
  <StateViewPart
    stateKey="empty"
  />
  <StateViewPart
    stateKey="noError"
  >
    <ForwardRef
      actions={
        Array [
          Object {
            "onClick": [Function],
            "title": "View in inventory",
          },
        ]
      }
      activeFilters={
        Object {
          "compliancescore": Array [],
          "compliant": Array [],
          "name": "",
        }
      }
      activeFiltersConfig={
        Object {
          "filters": Array [],
          "onDelete": [Function],
        }
      }
      bulkSelect={
        Object {
          "checked": false,
          "count": 0,
          "label": undefined,
          "onSelect": false,
        }
      }
      dedicatedAction={
        <Memo(Connect(ComplianceRemediationButton))
          allSystems={Array []}
          selectedRules={Array []}
        />
      }
      exportConfig={
        Object {
          "isDisabled": true,
          "onSelect": [Function],
        }
      }
      fallback={<Spinner />}
      filterConfig={
        Object {
          "items": Array [
            Object {
              "filterValues": Object {
                "onChange": [Function],
                "value": "",
              },
              "id": "name",
              "label": "Name",
              "placeholder": "Filter by name",
              "type": "text",
            },
            Object {
              "filterValues": Object {
                "items": Array [
                  Object {
                    "label": "Compliant",
                    "value": "true",
                  },
                  Object {
                    "label": "Non-compliant",
                    "value": "false",
                  },
                ],
                "onChange": [Function],
                "value": Array [],
              },
              "id": "compliant",
              "label": "Compliant",
              "placeholder": "Filter by compliant",
              "type": "checkbox",
            },
            Object {
              "filterValues": Object {
                "items": Array [
                  Object {
                    "label": "90 - 100%",
                    "value": "90-101",
                  },
                  Object {
                    "label": "70 - 89%",
                    "value": "70-90",
                  },
                  Object {
                    "label": "50 - 69%",
                    "value": "50-70",
                  },
                  Object {
                    "label": "Less than 50%",
                    "value": "0-50",
                  },
                ],
                "onChange": [Function],
                "value": Array [],
              },
              "id": "compliancescore",
              "label": "Compliance score",
              "placeholder": "Filter by compliance score",
              "type": "checkbox",
            },
          ],
        }
      }
      getEntities={[Function]}
      hideFilters={
        Object {
          "name": true,
          "registeredWith": true,
          "stale": true,
          "tags": true,
        }
      }
      onLoad={[Function]}
      tableProps={
        Object {
          "canSelectAll": false,
        }
      }
      variant=""
    />
  </StateViewPart>
</StateView>
`;

exports[`InventoryTable returns with showOnlySystemsWithTestResults 1`] = `
<StateView
  stateValues={
    Object {
      "empty": false,
      "error": undefined,
      "noError": true,
    }
  }
>
  <StateViewPart
    stateKey="error"
  >
    <ErrorPage />
  </StateViewPart>
  <StateViewPart
    stateKey="empty"
  />
  <StateViewPart
    stateKey="noError"
  >
    <ForwardRef
      actions={
        Array [
          Object {
            "onClick": [Function],
            "title": "View in inventory",
          },
        ]
      }
      activeFilters={
        Object {
          "name": "",
        }
      }
      activeFiltersConfig={
        Object {
          "filters": Array [],
          "onDelete": [Function],
        }
      }
      bulkSelect={
        Object {
          "checked": false,
          "count": 0,
          "label": undefined,
          "onSelect": false,
        }
      }
      dedicatedAction={
        <Memo(Connect(ComplianceRemediationButton))
          allSystems={Array []}
          selectedRules={Array []}
        />
      }
      exportConfig={
        Object {
          "isDisabled": true,
          "onSelect": [Function],
        }
      }
      fallback={<Spinner />}
      filterConfig={
        Object {
          "items": Array [
            Object {
              "filterValues": Object {
                "onChange": [Function],
                "value": "",
              },
              "id": "name",
              "label": "Name",
              "placeholder": "Filter by name",
              "type": "text",
            },
          ],
        }
      }
      getEntities={[Function]}
      hideFilters={
        Object {
          "name": true,
          "registeredWith": true,
          "stale": true,
          "tags": true,
        }
      }
      onLoad={[Function]}
      tableProps={
        Object {
          "canSelectAll": false,
        }
      }
      variant=""
    />
  </StateViewPart>
</StateView>
`;

exports[`InventoryTable returns without actions 1`] = `
<StateView
  stateValues={
    Object {
      "empty": false,
      "error": undefined,
      "noError": true,
    }
  }
>
  <StateViewPart
    stateKey="error"
  >
    <ErrorPage />
  </StateViewPart>
  <StateViewPart
    stateKey="empty"
  />
  <StateViewPart
    stateKey="noError"
  >
    <ForwardRef
      activeFilters={
        Object {
          "name": "",
        }
      }
      activeFiltersConfig={
        Object {
          "filters": Array [],
          "onDelete": [Function],
        }
      }
      bulkSelect={
        Object {
          "checked": false,
          "count": 0,
          "label": undefined,
          "onSelect": false,
        }
      }
      dedicatedAction={
        <Memo(Connect(ComplianceRemediationButton))
          allSystems={Array []}
          selectedRules={Array []}
        />
      }
      exportConfig={
        Object {
          "isDisabled": true,
          "onSelect": [Function],
        }
      }
      fallback={<Spinner />}
      filterConfig={
        Object {
          "items": Array [
            Object {
              "filterValues": Object {
                "onChange": [Function],
                "value": "",
              },
              "id": "name",
              "label": "Name",
              "placeholder": "Filter by name",
              "type": "text",
            },
          ],
        }
      }
      getEntities={[Function]}
      hideFilters={
        Object {
          "name": true,
          "registeredWith": true,
          "stale": true,
          "tags": true,
        }
      }
      onLoad={[Function]}
      tableProps={
        Object {
          "canSelectAll": false,
        }
      }
      variant=""
    />
  </StateViewPart>
</StateView>
`;

exports[`InventoryTable returns without remediations 1`] = `
<StateView
  stateValues={
    Object {
      "empty": false,
      "error": undefined,
      "noError": true,
    }
  }
>
  <StateViewPart
    stateKey="error"
  >
    <ErrorPage />
  </StateViewPart>
  <StateViewPart
    stateKey="empty"
  />
  <StateViewPart
    stateKey="noError"
  >
    <ForwardRef
      actions={
        Array [
          Object {
            "onClick": [Function],
            "title": "View in inventory",
          },
        ]
      }
      activeFilters={
        Object {
          "name": "",
        }
      }
      activeFiltersConfig={
        Object {
          "filters": Array [],
          "onDelete": [Function],
        }
      }
      bulkSelect={
        Object {
          "checked": false,
          "count": 0,
          "label": undefined,
          "onSelect": false,
        }
      }
      exportConfig={
        Object {
          "isDisabled": true,
          "onSelect": [Function],
        }
      }
      fallback={<Spinner />}
      filterConfig={
        Object {
          "items": Array [
            Object {
              "filterValues": Object {
                "onChange": [Function],
                "value": "",
              },
              "id": "name",
              "label": "Name",
              "placeholder": "Filter by name",
              "type": "text",
            },
          ],
        }
      }
      getEntities={[Function]}
      hideFilters={
        Object {
          "name": true,
          "registeredWith": true,
          "stale": true,
          "tags": true,
        }
      }
      onLoad={[Function]}
      tableProps={
        Object {
          "canSelectAll": false,
        }
      }
      variant=""
    />
  </StateViewPart>
</StateView>
`;

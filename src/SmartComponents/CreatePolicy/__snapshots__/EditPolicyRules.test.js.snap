// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditPolicyRules expect to render with error on error 1`] = `
<StateViewWithError
  stateValues={
    Object {
      "data": undefined,
      "error": true,
      "loading": undefined,
    }
  }
>
  <StateViewPart
    stateKey="loading"
  >
    <EmptyTable>
      <Spinner />
    </EmptyTable>
  </StateViewPart>
  <StateViewPart
    stateKey="data"
  >
    <TextContent>
      <Text
        component="h1"
      >
        Rules
      </Text>
    </TextContent>
    <TextContent>
      <Text>
        Edit your policy by including and excluding rules.
      </Text>
      <Text>
        Selected policy type 
        <strong />
         has 
         rules. 
      </Text>
    </TextContent>
    <SystemRulesTable
      columns={
        Array [
          Object {
            "title": "Rule",
            "transforms": Array [
              [Function],
            ],
          },
          Object {
            "title": "Severity",
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
          Object {
            "original": "Ansible",
            "props": Object {
              "tooltip": "Ansible",
            },
            "title": <React.Fragment>
              <AnsibeTowerIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
               Ansible
            </React.Fragment>,
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
        ]
      }
      handleSelect={[Function]}
      hidePassed={false}
      profileRules={
        Array [
          Object {
            "rules": Array [],
          },
        ]
      }
      remediationsEnabled={false}
      selectedFilter={true}
      selectedRefIds={Array []}
      tailoringEnabled={true}
    />
  </StateViewPart>
</StateViewWithError>
`;

exports[`EditPolicyRules expect to render without error 1`] = `
<StateViewWithError
  stateValues={
    Object {
      "data": Object {
        "benchmark": Object {
          "rules": Array [
            Object {
              "refId": "xccdfrefid",
            },
          ],
        },
        "profile": Object {
          "name": "test profile",
          "refId": "refID-test",
          "rules": Array [
            Object {
              "refId": "xccdfrefid",
            },
          ],
        },
      },
      "error": undefined,
      "loading": undefined,
    }
  }
>
  <StateViewPart
    stateKey="loading"
  >
    <EmptyTable>
      <Spinner />
    </EmptyTable>
  </StateViewPart>
  <StateViewPart
    stateKey="data"
  >
    <TextContent>
      <Text
        component="h1"
      >
        Rules
      </Text>
    </TextContent>
    <TextContent>
      <Text>
        Edit your policy by including and excluding rules.
      </Text>
      <Text>
        Selected policy type 
        <strong>
          test profile
        </strong>
         has 
         rules. 
      </Text>
    </TextContent>
    <SystemRulesTable
      columns={
        Array [
          Object {
            "title": "Rule",
            "transforms": Array [
              [Function],
            ],
          },
          Object {
            "title": "Severity",
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
          Object {
            "original": "Ansible",
            "props": Object {
              "tooltip": "Ansible",
            },
            "title": <React.Fragment>
              <AnsibeTowerIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
               Ansible
            </React.Fragment>,
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
        ]
      }
      handleSelect={[Function]}
      hidePassed={false}
      profileRules={
        Array [
          Object {
            "profile": Object {
              "name": "test profile",
              "refId": "refID-test",
            },
            "rules": Array [
              Object {
                "refId": "xccdfrefid",
              },
            ],
          },
        ]
      }
      remediationsEnabled={false}
      selectedFilter={true}
      selectedRefIds={Array []}
      tailoringEnabled={true}
    />
  </StateViewPart>
</StateViewWithError>
`;

exports[`EditPolicyRules expect to render without error 2`] = `
<StateViewWithError
  stateValues={
    Object {
      "data": Object {
        "benchmark": Object {
          "rules": Array [
            Object {
              "refId": "xccdfrefid",
            },
          ],
        },
        "profile": Object {
          "name": "test profile",
          "refId": "refID-test",
          "rules": Array [
            Object {
              "refId": "xccdfrefid",
            },
          ],
        },
      },
      "error": undefined,
      "loading": undefined,
    }
  }
>
  <StateViewPart
    stateKey="loading"
  >
    <EmptyTable>
      <Spinner />
    </EmptyTable>
  </StateViewPart>
  <StateViewPart
    stateKey="data"
  >
    <TextContent>
      <Text
        component="h1"
      >
        Rules
      </Text>
    </TextContent>
    <TextContent>
      <Text>
        Edit your policy by including and excluding rules.
      </Text>
      <Text>
        Selected policy type 
        <strong>
          test profile
        </strong>
         has 
         rules. 
        <Button
          isInline={true}
          onClick={[Function]}
          variant="link"
        >
          Reset to default selection
        </Button>
      </Text>
    </TextContent>
    <SystemRulesTable
      columns={
        Array [
          Object {
            "title": "Rule",
            "transforms": Array [
              [Function],
            ],
          },
          Object {
            "title": "Severity",
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
          Object {
            "original": "Ansible",
            "props": Object {
              "tooltip": "Ansible",
            },
            "title": <React.Fragment>
              <AnsibeTowerIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
               Ansible
            </React.Fragment>,
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
        ]
      }
      handleSelect={[Function]}
      hidePassed={false}
      profileRules={
        Array [
          Object {
            "profile": Object {
              "name": "test profile",
              "refId": "refID-test",
            },
            "rules": Array [
              Object {
                "refId": "xccdfrefid",
              },
            ],
          },
        ]
      }
      remediationsEnabled={false}
      selectedFilter={true}
      selectedRefIds={
        Array [
          "xccdfrefid",
        ]
      }
      tailoringEnabled={true}
    />
  </StateViewPart>
</StateViewWithError>
`;

exports[`EditPolicyRules expect to render without error on loading 1`] = `
<StateViewWithError
  stateValues={
    Object {
      "data": undefined,
      "error": undefined,
      "loading": true,
    }
  }
>
  <StateViewPart
    stateKey="loading"
  >
    <EmptyTable>
      <Spinner />
    </EmptyTable>
  </StateViewPart>
  <StateViewPart
    stateKey="data"
  >
    <TextContent>
      <Text
        component="h1"
      >
        Rules
      </Text>
    </TextContent>
    <TextContent>
      <Text>
        Edit your policy by including and excluding rules.
      </Text>
      <Text>
        Selected policy type 
        <strong />
         has 
         rules. 
      </Text>
    </TextContent>
    <SystemRulesTable
      columns={
        Array [
          Object {
            "title": "Rule",
            "transforms": Array [
              [Function],
            ],
          },
          Object {
            "title": "Severity",
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
          Object {
            "original": "Ansible",
            "props": Object {
              "tooltip": "Ansible",
            },
            "title": <React.Fragment>
              <AnsibeTowerIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
               Ansible
            </React.Fragment>,
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
        ]
      }
      handleSelect={[Function]}
      hidePassed={false}
      loading={true}
      profileRules={
        Array [
          Object {
            "rules": Array [],
          },
        ]
      }
      remediationsEnabled={false}
      selectedFilter={true}
      selectedRefIds={Array []}
      tailoringEnabled={true}
    />
  </StateViewPart>
</StateViewWithError>
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SystemDetails expect to render a 500 error 1`] = `
<StateViewWithError
  stateValues={
    Object {
      "data": Object {
        "system": Object {
          "name": "test.host.local",
        },
      },
      "error": Object {
        "error": "Test Error loading",
        "networkError": Object {
          "statusCode": 500,
        },
      },
      "loading": false,
    }
  }
>
  <StateViewPart
    stateKey="data"
  >
    <PageHeader>
      <Component>
        <BreadcrumbItem
          onClick={[Function]}
          to="/rhel/compliance/systems"
        >
          Systems
        </BreadcrumbItem>
        <BreadcrumbItem
          isActive={true}
        >
          test.host.local
        </BreadcrumbItem>
      </Component>
      <[object Object] />
      <br />
    </PageHeader>
    <Connect(Main)>
      <SystemDetails
        client={
          ApolloClient {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimistic": Array [],
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "cacheKeyRoot": CacheKeyNode {
                  "children": null,
                  "key": null,
                },
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "keyMaker": QueryKeyMaker {
                  "cacheKeyRoot": CacheKeyNode {
                    "children": null,
                    "key": null,
                  },
                  "perQueryKeyMakers": Array [],
                },
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Array [],
              "watches": Array [],
            },
            "clientAwareness": Object {},
            "defaultOptions": Object {},
            "disableNetworkFetches": false,
            "link": ApolloLink {
              "request": [Function],
            },
            "mutate": [Function],
            "query": [Function],
            "queryDeduplication": true,
            "reFetchObservableQueries": [Function],
            "resetStore": [Function],
            "resetStoreCallbacks": Array [],
            "ssrMode": false,
            "store": DataStore {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": CacheKeyNode {
                  "children": null,
                  "key": null,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimistic": Array [],
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "cacheKeyRoot": CacheKeyNode {
                    "children": null,
                    "key": null,
                  },
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "keyMaker": QueryKeyMaker {
                    "cacheKeyRoot": CacheKeyNode {
                      "children": null,
                      "key": null,
                    },
                    "perQueryKeyMakers": Array [],
                  },
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Array [],
                "watches": Array [],
              },
            },
            "version": "2.4.8",
            "watchQuery": [Function],
          }
        }
        hidePassed={false}
        inventoryId={1}
      />
    </Connect(Main)>
  </StateViewPart>
  <StateViewPart
    stateKey="loading"
  >
    <PageHeader>
      <Skeleton
        isDark={false}
        size="md"
      />
    </PageHeader>
  </StateViewPart>
</StateViewWithError>
`;

exports[`SystemDetails expect to render and pass hidePassed correctly 1`] = `
<StateViewWithError
  stateValues={
    Object {
      "data": Object {
        "system": Object {
          "name": "test.host.local",
        },
      },
      "error": false,
      "loading": false,
    }
  }
>
  <StateViewPart
    stateKey="data"
  >
    <PageHeader>
      <Component>
        <BreadcrumbItem
          onClick={[Function]}
          to="/rhel/compliance/systems"
        >
          Systems
        </BreadcrumbItem>
        <BreadcrumbItem
          isActive={true}
        >
          test.host.local
        </BreadcrumbItem>
      </Component>
      <[object Object] />
      <br />
    </PageHeader>
    <Connect(Main)>
      <SystemDetails
        client={
          ApolloClient {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimistic": Array [],
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "cacheKeyRoot": CacheKeyNode {
                  "children": null,
                  "key": null,
                },
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "keyMaker": QueryKeyMaker {
                  "cacheKeyRoot": CacheKeyNode {
                    "children": null,
                    "key": null,
                  },
                  "perQueryKeyMakers": Array [],
                },
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Array [],
              "watches": Array [],
            },
            "clientAwareness": Object {},
            "defaultOptions": Object {},
            "disableNetworkFetches": false,
            "link": ApolloLink {
              "request": [Function],
            },
            "mutate": [Function],
            "query": [Function],
            "queryDeduplication": true,
            "reFetchObservableQueries": [Function],
            "resetStore": [Function],
            "resetStoreCallbacks": Array [],
            "ssrMode": false,
            "store": DataStore {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": CacheKeyNode {
                  "children": null,
                  "key": null,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimistic": Array [],
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "cacheKeyRoot": CacheKeyNode {
                    "children": null,
                    "key": null,
                  },
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "keyMaker": QueryKeyMaker {
                    "cacheKeyRoot": CacheKeyNode {
                      "children": null,
                      "key": null,
                    },
                    "perQueryKeyMakers": Array [],
                  },
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Array [],
                "watches": Array [],
              },
            },
            "version": "2.4.8",
            "watchQuery": [Function],
          }
        }
        hidePassed={true}
        inventoryId={1}
      />
    </Connect(Main)>
  </StateViewPart>
  <StateViewPart
    stateKey="loading"
  >
    <PageHeader>
      <Skeleton
        isDark={false}
        size="md"
      />
    </PageHeader>
  </StateViewPart>
</StateViewWithError>
`;

exports[`SystemDetails expect to render loading 1`] = `
<StateViewWithError
  stateValues={
    Object {
      "data": Object {
        "system": Object {
          "name": "test.host.local",
        },
      },
      "error": false,
      "loading": true,
    }
  }
>
  <StateViewPart
    stateKey="data"
  >
    <PageHeader>
      <Component>
        <BreadcrumbItem
          onClick={[Function]}
          to="/rhel/compliance/systems"
        >
          Systems
        </BreadcrumbItem>
        <BreadcrumbItem
          isActive={true}
        >
          test.host.local
        </BreadcrumbItem>
      </Component>
      <[object Object] />
      <br />
    </PageHeader>
    <Connect(Main)>
      <SystemDetails
        client={
          ApolloClient {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimistic": Array [],
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "cacheKeyRoot": CacheKeyNode {
                  "children": null,
                  "key": null,
                },
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "keyMaker": QueryKeyMaker {
                  "cacheKeyRoot": CacheKeyNode {
                    "children": null,
                    "key": null,
                  },
                  "perQueryKeyMakers": Array [],
                },
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Array [],
              "watches": Array [],
            },
            "clientAwareness": Object {},
            "defaultOptions": Object {},
            "disableNetworkFetches": false,
            "link": ApolloLink {
              "request": [Function],
            },
            "mutate": [Function],
            "query": [Function],
            "queryDeduplication": true,
            "reFetchObservableQueries": [Function],
            "resetStore": [Function],
            "resetStoreCallbacks": Array [],
            "ssrMode": false,
            "store": DataStore {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": CacheKeyNode {
                  "children": null,
                  "key": null,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimistic": Array [],
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "cacheKeyRoot": CacheKeyNode {
                    "children": null,
                    "key": null,
                  },
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "keyMaker": QueryKeyMaker {
                    "cacheKeyRoot": CacheKeyNode {
                      "children": null,
                      "key": null,
                    },
                    "perQueryKeyMakers": Array [],
                  },
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Array [],
                "watches": Array [],
              },
            },
            "version": "2.4.8",
            "watchQuery": [Function],
          }
        }
        hidePassed={false}
        inventoryId={1}
      />
    </Connect(Main)>
  </StateViewPart>
  <StateViewPart
    stateKey="loading"
  >
    <PageHeader>
      <Skeleton
        isDark={false}
        size="md"
      />
    </PageHeader>
  </StateViewPart>
</StateViewWithError>
`;

exports[`SystemDetails expect to render without error 1`] = `
<StateViewWithError
  stateValues={
    Object {
      "data": Object {
        "system": Object {
          "name": "test.host.local",
        },
      },
      "error": false,
      "loading": false,
    }
  }
>
  <StateViewPart
    stateKey="data"
  >
    <PageHeader>
      <Component>
        <BreadcrumbItem
          onClick={[Function]}
          to="/rhel/compliance/systems"
        >
          Systems
        </BreadcrumbItem>
        <BreadcrumbItem
          isActive={true}
        >
          test.host.local
        </BreadcrumbItem>
      </Component>
      <[object Object] />
      <br />
    </PageHeader>
    <Connect(Main)>
      <SystemDetails
        client={
          ApolloClient {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimistic": Array [],
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "cacheKeyRoot": CacheKeyNode {
                  "children": null,
                  "key": null,
                },
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "keyMaker": QueryKeyMaker {
                  "cacheKeyRoot": CacheKeyNode {
                    "children": null,
                    "key": null,
                  },
                  "perQueryKeyMakers": Array [],
                },
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Array [],
              "watches": Array [],
            },
            "clientAwareness": Object {},
            "defaultOptions": Object {},
            "disableNetworkFetches": false,
            "link": ApolloLink {
              "request": [Function],
            },
            "mutate": [Function],
            "query": [Function],
            "queryDeduplication": true,
            "reFetchObservableQueries": [Function],
            "resetStore": [Function],
            "resetStoreCallbacks": Array [],
            "ssrMode": false,
            "store": DataStore {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": CacheKeyNode {
                  "children": null,
                  "key": null,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimistic": Array [],
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "cacheKeyRoot": CacheKeyNode {
                    "children": null,
                    "key": null,
                  },
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "keyMaker": QueryKeyMaker {
                    "cacheKeyRoot": CacheKeyNode {
                      "children": null,
                      "key": null,
                    },
                    "perQueryKeyMakers": Array [],
                  },
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Array [],
                "watches": Array [],
              },
            },
            "version": "2.4.8",
            "watchQuery": [Function],
          }
        }
        hidePassed={false}
        inventoryId={1}
      />
    </Connect(Main)>
  </StateViewPart>
  <StateViewPart
    stateKey="loading"
  >
    <PageHeader>
      <Skeleton
        isDark={false}
        size="md"
      />
    </PageHeader>
  </StateViewPart>
</StateViewWithError>
`;
